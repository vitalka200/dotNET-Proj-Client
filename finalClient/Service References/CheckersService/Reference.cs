//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace finalClient.CheckersService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Move", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Move : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Coordinate FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Coordinate ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Coordinate From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Coordinate To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coordinate", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Coordinate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Status GameStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Player Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Player Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinnerPlayerNumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDateTime {
            get {
                return this.CreatedDateTimeField;
            }
            set {
                if ((this.CreatedDateTimeField.Equals(value) != true)) {
                    this.CreatedDateTimeField = value;
                    this.RaisePropertyChanged("CreatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Status GameStatus {
            get {
                return this.GameStatusField;
            }
            set {
                if ((this.GameStatusField.Equals(value) != true)) {
                    this.GameStatusField = value;
                    this.RaisePropertyChanged("GameStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Player Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Player Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerPlayerNum {
            get {
                return this.WinnerPlayerNumField;
            }
            set {
                if ((this.WinnerPlayerNumField.Equals(value) != true)) {
                    this.WinnerPlayerNumField = value;
                    this.RaisePropertyChanged("WinnerPlayerNum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finalClient.CheckersService.Family FamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finalClient.CheckersService.Family Family {
            get {
                return this.FamilyField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyField, value) != true)) {
                    this.FamilyField = value;
                    this.RaisePropertyChanged("Family");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MOVE_ACCEPTED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GAME_LOSE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GAME_WIN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEW_GAME = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GAME_STARTED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GAME_COMPLETED = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_SUCH_GAME = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WAITING_FOR_OTHER_PLAYER_TO_ARRIVE = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_ENOUGH_PLAYERS_TO_START_GAME = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GAME_ALREADY_STARTED_BY_OTHER_PLAYERS = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_LOGGED_IN = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_SUCH_USER = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONG_INPUT = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOGIN_SUCCEDED = 13,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Family", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Family : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CheckersService.IDuplexCheckersService", CallbackContract=typeof(finalClient.CheckersService.IDuplexCheckersServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDuplexCheckersService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/MakeMove")]
        void MakeMove(finalClient.CheckersService.Move move);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/MakeMove")]
        System.Threading.Tasks.Task MakeMoveAsync(finalClient.CheckersService.Move move);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/Login")]
        void Login(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/Login")]
        System.Threading.Tasks.Task LoginAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/StartGame")]
        void StartGame(finalClient.CheckersService.Game game, bool computerRival);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(finalClient.CheckersService.Game game, bool computerRival);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/SaveInitialPositions")]
        void SaveInitialPositions(finalClient.CheckersService.Move[] initialPositions, finalClient.CheckersService.Status gameStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/SaveInitialPositions")]
        System.Threading.Tasks.Task SaveInitialPositionsAsync(finalClient.CheckersService.Move[] initialPositions, finalClient.CheckersService.Status gameStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexCheckersServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/MakeMoveCallback")]
        void MakeMoveCallback(finalClient.CheckersService.Status status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/LoginCallback")]
        void LoginCallback(finalClient.CheckersService.Player player, finalClient.CheckersService.Game[] playerGames, finalClient.CheckersService.Status status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/StartGameCallback")]
        void StartGameCallback(finalClient.CheckersService.Game game, finalClient.CheckersService.Status status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/PlayerTurnCallback")]
        void PlayerTurnCallback(finalClient.CheckersService.Move lastRivalMove);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexCheckersService/GameEnd")]
        void GameEnd(finalClient.CheckersService.Game game, finalClient.CheckersService.Move lastRivalMove, finalClient.CheckersService.Status status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexCheckersServiceChannel : finalClient.CheckersService.IDuplexCheckersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexCheckersServiceClient : System.ServiceModel.DuplexClientBase<finalClient.CheckersService.IDuplexCheckersService>, finalClient.CheckersService.IDuplexCheckersService {
        
        public DuplexCheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexCheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexCheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexCheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexCheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void MakeMove(finalClient.CheckersService.Move move) {
            base.Channel.MakeMove(move);
        }
        
        public System.Threading.Tasks.Task MakeMoveAsync(finalClient.CheckersService.Move move) {
            return base.Channel.MakeMoveAsync(move);
        }
        
        public void Login(string name, string password) {
            base.Channel.Login(name, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string name, string password) {
            return base.Channel.LoginAsync(name, password);
        }
        
        public void StartGame(finalClient.CheckersService.Game game, bool computerRival) {
            base.Channel.StartGame(game, computerRival);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(finalClient.CheckersService.Game game, bool computerRival) {
            return base.Channel.StartGameAsync(game, computerRival);
        }
        
        public void SaveInitialPositions(finalClient.CheckersService.Move[] initialPositions, finalClient.CheckersService.Status gameStatus) {
            base.Channel.SaveInitialPositions(initialPositions, gameStatus);
        }
        
        public System.Threading.Tasks.Task SaveInitialPositionsAsync(finalClient.CheckersService.Move[] initialPositions, finalClient.CheckersService.Status gameStatus) {
            return base.Channel.SaveInitialPositionsAsync(initialPositions, gameStatus);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CheckersService.ISoapCheckersService")]
    public interface ISoapCheckersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByPlayer", ReplyAction="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByPlayerResponse")]
        finalClient.CheckersService.Move[] RecoverGameMovesByPlayer(finalClient.CheckersService.Game game, finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByPlayer", ReplyAction="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByPlayerResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> RecoverGameMovesByPlayerAsync(finalClient.CheckersService.Game game, finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/GetGamesByPlayer", ReplyAction="http://tempuri.org/ISoapCheckersService/GetGamesByPlayerResponse")]
        finalClient.CheckersService.Game[] GetGamesByPlayer(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/GetGamesByPlayer", ReplyAction="http://tempuri.org/ISoapCheckersService/GetGamesByPlayerResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesByPlayerAsync(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByGameId", ReplyAction="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByGameIdResponse")]
        finalClient.CheckersService.Move[] RecoverGameMovesByGameId(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByGameId", ReplyAction="http://tempuri.org/ISoapCheckersService/RecoverGameMovesByGameIdResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> RecoverGameMovesByGameIdAsync(int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoapCheckersServiceChannel : finalClient.CheckersService.ISoapCheckersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoapCheckersServiceClient : System.ServiceModel.ClientBase<finalClient.CheckersService.ISoapCheckersService>, finalClient.CheckersService.ISoapCheckersService {
        
        public SoapCheckersServiceClient() {
        }
        
        public SoapCheckersServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoapCheckersServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapCheckersServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapCheckersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public finalClient.CheckersService.Move[] RecoverGameMovesByPlayer(finalClient.CheckersService.Game game, finalClient.CheckersService.Player player) {
            return base.Channel.RecoverGameMovesByPlayer(game, player);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> RecoverGameMovesByPlayerAsync(finalClient.CheckersService.Game game, finalClient.CheckersService.Player player) {
            return base.Channel.RecoverGameMovesByPlayerAsync(game, player);
        }
        
        public finalClient.CheckersService.Game[] GetGamesByPlayer(finalClient.CheckersService.Player player) {
            return base.Channel.GetGamesByPlayer(player);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesByPlayerAsync(finalClient.CheckersService.Player player) {
            return base.Channel.GetGamesByPlayerAsync(player);
        }
        
        public finalClient.CheckersService.Move[] RecoverGameMovesByGameId(int gameId) {
            return base.Channel.RecoverGameMovesByGameId(gameId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> RecoverGameMovesByGameIdAsync(int gameId) {
            return base.Channel.RecoverGameMovesByGameIdAsync(gameId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CheckersService.IRestCheckersService")]
    public interface IRestCheckersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddPlayer", ReplyAction="http://tempuri.org/IRestCheckersService/AddPlayerResponse")]
        bool AddPlayer(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddPlayer", ReplyAction="http://tempuri.org/IRestCheckersService/AddPlayerResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerAsync(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/RemovePlayer", ReplyAction="http://tempuri.org/IRestCheckersService/RemovePlayerResponse")]
        bool RemovePlayer(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/RemovePlayer", ReplyAction="http://tempuri.org/IRestCheckersService/RemovePlayerResponse")]
        System.Threading.Tasks.Task<bool> RemovePlayerAsync(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdatePlayer", ReplyAction="http://tempuri.org/IRestCheckersService/UpdatePlayerResponse")]
        bool UpdatePlayer(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdatePlayer", ReplyAction="http://tempuri.org/IRestCheckersService/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(finalClient.CheckersService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayerById", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayerByIdResponse")]
        finalClient.CheckersService.Player GetPlayerById(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayerById", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayerByIdResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Player> GetPlayerByIdAsync(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayers", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersResponse")]
        finalClient.CheckersService.Player[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayers", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayersByGame", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersByGameResponse")]
        finalClient.CheckersService.Player[] GetPlayersByGame(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayersByGame", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersByGameResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersByGameAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/RemoveGame", ReplyAction="http://tempuri.org/IRestCheckersService/RemoveGameResponse")]
        bool RemoveGame(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/RemoveGame", ReplyAction="http://tempuri.org/IRestCheckersService/RemoveGameResponse")]
        System.Threading.Tasks.Task<bool> RemoveGameAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdateGame", ReplyAction="http://tempuri.org/IRestCheckersService/UpdateGameResponse")]
        bool UpdateGame(finalClient.CheckersService.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdateGame", ReplyAction="http://tempuri.org/IRestCheckersService/UpdateGameResponse")]
        System.Threading.Tasks.Task<bool> UpdateGameAsync(finalClient.CheckersService.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddGame", ReplyAction="http://tempuri.org/IRestCheckersService/AddGameResponse")]
        bool AddGame(finalClient.CheckersService.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddGame", ReplyAction="http://tempuri.org/IRestCheckersService/AddGameResponse")]
        System.Threading.Tasks.Task<bool> AddGameAsync(finalClient.CheckersService.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGames", ReplyAction="http://tempuri.org/IRestCheckersService/GetGamesResponse")]
        finalClient.CheckersService.Game[] GetGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGames", ReplyAction="http://tempuri.org/IRestCheckersService/GetGamesResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGameById", ReplyAction="http://tempuri.org/IRestCheckersService/GetGameByIdResponse")]
        finalClient.CheckersService.Game GetGameById(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGameById", ReplyAction="http://tempuri.org/IRestCheckersService/GetGameByIdResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Game> GetGameByIdAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGamesByPlayerId", ReplyAction="http://tempuri.org/IRestCheckersService/GetGamesByPlayerIdResponse")]
        finalClient.CheckersService.Game[] GetGamesByPlayerId(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetGamesByPlayerId", ReplyAction="http://tempuri.org/IRestCheckersService/GetGamesByPlayerIdResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesByPlayerIdAsync(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetTotalGamesCountForPlayer", ReplyAction="http://tempuri.org/IRestCheckersService/GetTotalGamesCountForPlayerResponse")]
        int GetTotalGamesCountForPlayer(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetTotalGamesCountForPlayer", ReplyAction="http://tempuri.org/IRestCheckersService/GetTotalGamesCountForPlayerResponse")]
        System.Threading.Tasks.Task<int> GetTotalGamesCountForPlayerAsync(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddFamily", ReplyAction="http://tempuri.org/IRestCheckersService/AddFamilyResponse")]
        bool AddFamily(finalClient.CheckersService.Family family);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/AddFamily", ReplyAction="http://tempuri.org/IRestCheckersService/AddFamilyResponse")]
        System.Threading.Tasks.Task<bool> AddFamilyAsync(finalClient.CheckersService.Family family);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/DeleteFamily", ReplyAction="http://tempuri.org/IRestCheckersService/DeleteFamilyResponse")]
        bool DeleteFamily(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/DeleteFamily", ReplyAction="http://tempuri.org/IRestCheckersService/DeleteFamilyResponse")]
        System.Threading.Tasks.Task<bool> DeleteFamilyAsync(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetFamily", ReplyAction="http://tempuri.org/IRestCheckersService/GetFamilyResponse")]
        finalClient.CheckersService.Family GetFamily(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetFamily", ReplyAction="http://tempuri.org/IRestCheckersService/GetFamilyResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Family> GetFamilyAsync(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdateFamily", ReplyAction="http://tempuri.org/IRestCheckersService/UpdateFamilyResponse")]
        bool UpdateFamily(finalClient.CheckersService.Family family);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/UpdateFamily", ReplyAction="http://tempuri.org/IRestCheckersService/UpdateFamilyResponse")]
        System.Threading.Tasks.Task<bool> UpdateFamilyAsync(finalClient.CheckersService.Family family);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayersByFamily", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersByFamilyResponse")]
        finalClient.CheckersService.Player[] GetPlayersByFamily(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetPlayersByFamily", ReplyAction="http://tempuri.org/IRestCheckersService/GetPlayersByFamilyResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersByFamilyAsync(string familyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetMovesByGame", ReplyAction="http://tempuri.org/IRestCheckersService/GetMovesByGameResponse")]
        finalClient.CheckersService.Move[] GetMovesByGame(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestCheckersService/GetMovesByGame", ReplyAction="http://tempuri.org/IRestCheckersService/GetMovesByGameResponse")]
        System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> GetMovesByGameAsync(string gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRestCheckersServiceChannel : finalClient.CheckersService.IRestCheckersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestCheckersServiceClient : System.ServiceModel.ClientBase<finalClient.CheckersService.IRestCheckersService>, finalClient.CheckersService.IRestCheckersService {
        
        public RestCheckersServiceClient() {
        }
        
        public RestCheckersServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RestCheckersServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestCheckersServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestCheckersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddPlayer(finalClient.CheckersService.Player player) {
            return base.Channel.AddPlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerAsync(finalClient.CheckersService.Player player) {
            return base.Channel.AddPlayerAsync(player);
        }
        
        public bool RemovePlayer(string playerId) {
            return base.Channel.RemovePlayer(playerId);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePlayerAsync(string playerId) {
            return base.Channel.RemovePlayerAsync(playerId);
        }
        
        public bool UpdatePlayer(finalClient.CheckersService.Player player) {
            return base.Channel.UpdatePlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(finalClient.CheckersService.Player player) {
            return base.Channel.UpdatePlayerAsync(player);
        }
        
        public finalClient.CheckersService.Player GetPlayerById(string playerId) {
            return base.Channel.GetPlayerById(playerId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Player> GetPlayerByIdAsync(string playerId) {
            return base.Channel.GetPlayerByIdAsync(playerId);
        }
        
        public finalClient.CheckersService.Player[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public finalClient.CheckersService.Player[] GetPlayersByGame(string gameId) {
            return base.Channel.GetPlayersByGame(gameId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersByGameAsync(string gameId) {
            return base.Channel.GetPlayersByGameAsync(gameId);
        }
        
        public bool RemoveGame(string gameId) {
            return base.Channel.RemoveGame(gameId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGameAsync(string gameId) {
            return base.Channel.RemoveGameAsync(gameId);
        }
        
        public bool UpdateGame(finalClient.CheckersService.Game game) {
            return base.Channel.UpdateGame(game);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGameAsync(finalClient.CheckersService.Game game) {
            return base.Channel.UpdateGameAsync(game);
        }
        
        public bool AddGame(finalClient.CheckersService.Game game) {
            return base.Channel.AddGame(game);
        }
        
        public System.Threading.Tasks.Task<bool> AddGameAsync(finalClient.CheckersService.Game game) {
            return base.Channel.AddGameAsync(game);
        }
        
        public finalClient.CheckersService.Game[] GetGames() {
            return base.Channel.GetGames();
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesAsync() {
            return base.Channel.GetGamesAsync();
        }
        
        public finalClient.CheckersService.Game GetGameById(string gameId) {
            return base.Channel.GetGameById(gameId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Game> GetGameByIdAsync(string gameId) {
            return base.Channel.GetGameByIdAsync(gameId);
        }
        
        public finalClient.CheckersService.Game[] GetGamesByPlayerId(string playerId) {
            return base.Channel.GetGamesByPlayerId(playerId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Game[]> GetGamesByPlayerIdAsync(string playerId) {
            return base.Channel.GetGamesByPlayerIdAsync(playerId);
        }
        
        public int GetTotalGamesCountForPlayer(string playerId) {
            return base.Channel.GetTotalGamesCountForPlayer(playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetTotalGamesCountForPlayerAsync(string playerId) {
            return base.Channel.GetTotalGamesCountForPlayerAsync(playerId);
        }
        
        public bool AddFamily(finalClient.CheckersService.Family family) {
            return base.Channel.AddFamily(family);
        }
        
        public System.Threading.Tasks.Task<bool> AddFamilyAsync(finalClient.CheckersService.Family family) {
            return base.Channel.AddFamilyAsync(family);
        }
        
        public bool DeleteFamily(string familyId) {
            return base.Channel.DeleteFamily(familyId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFamilyAsync(string familyId) {
            return base.Channel.DeleteFamilyAsync(familyId);
        }
        
        public finalClient.CheckersService.Family GetFamily(string familyId) {
            return base.Channel.GetFamily(familyId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Family> GetFamilyAsync(string familyId) {
            return base.Channel.GetFamilyAsync(familyId);
        }
        
        public bool UpdateFamily(finalClient.CheckersService.Family family) {
            return base.Channel.UpdateFamily(family);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFamilyAsync(finalClient.CheckersService.Family family) {
            return base.Channel.UpdateFamilyAsync(family);
        }
        
        public finalClient.CheckersService.Player[] GetPlayersByFamily(string familyId) {
            return base.Channel.GetPlayersByFamily(familyId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Player[]> GetPlayersByFamilyAsync(string familyId) {
            return base.Channel.GetPlayersByFamilyAsync(familyId);
        }
        
        public finalClient.CheckersService.Move[] GetMovesByGame(string gameId) {
            return base.Channel.GetMovesByGame(gameId);
        }
        
        public System.Threading.Tasks.Task<finalClient.CheckersService.Move[]> GetMovesByGameAsync(string gameId) {
            return base.Channel.GetMovesByGameAsync(gameId);
        }
    }
}
